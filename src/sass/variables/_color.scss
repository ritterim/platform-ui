@forward "color-tokens";

@use "../config";

@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

// Colors
$greyscale: (
  "white": white,
  "lighter": #efefef,
  "light-mid": #e2e3e5,
  "light-3": #ccc,
  "light": #999,
  "base": #666666,
  "dark": #333,
  "black": #222,
);

$all-colors: () !default;
$site-colors: () !default;

@if meta.type-of(config.$config-colors) == "map" {
  $all-colors: map.merge(config.$config-colors, $greyscale);
} @else {
  $all-colors: map.merge($greyscale, $all-colors);
  @warn "$config-colors is not set or empty";
}

@mixin all-color-tokens() {
  @each $name, $color in $all-colors {
  
    $hue: hue($color);
    $sat: saturation($color);
    $light: lightness($color);
  
    --#{$name}-hue: #{$hue};
    --#{$name}-sat: #{$sat};
    --#{$name}-light: #{$light};
  
    --#{$name}: hsl(#{$hue}, #{$sat}, #{$light});
  
    @for $i from 1 through 9 {
      $hue: hue($color);
      $sat: saturation($color);
      $light: lightness($color);
      --#{$name}-a#{$i}0: hsla(#{$hue}, #{$sat}, #{$light}, #{$i * 0.1});
    }
  }
}



// Error Colors
$error-colors: (
  "positive": #b5cc18,
  "negative": tomato,
  "neutral": map.get($greyscale, "light"),
);

@mixin error-tokens() {
  @each $name, $color in $error-colors {
    $hue: hue($color);
    $sat: saturation($color);
    $light: lightness($color);
  
    --#{$name}-hue: #{$hue};
    --#{$name}-sat: #{$sat};
    --#{$name}-light: #{$light};
  
    --#{$name}: hsl(#{$hue}, #{$sat}, #{$light});
  }
}



// Message Colors
$message-colors: (
  "info": map.get(config.$brand-colors, "lightblue"),
  "note": #ffeeba,
  "warning": #ffeeba,
  "error": #ffe5e0,
  "success": #d4edda,
);

@mixin message-tokens() {
  @each $name, $color in $message-colors {
    $hue: hue($color);
    $sat: saturation($color);
    $light: lightness($color);
  
    --#{$name}-hue: #{$hue};
    --#{$name}-sat: #{$sat};
    --#{$name}-light: #{$light};
  
    --#{$name}: hsl(#{$hue}, #{$sat}, #{$light});
  }
}
