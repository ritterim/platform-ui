@use "../config";
@use "../mixins/" as mixins;
@use "../variables" as variables;
@use "sass:map";
@use "sass:meta";

// Background Colors
$all-colors: () !default;
$site-colors: () !default;

@if meta.type-of(config.$config-colors) == "map" {
  $all-colors: map.merge(config.$config-colors, variables.$greyscale);
} @else {
  $all-colors: map.merge(variables.$greyscale, $all-colors);
  @warn "$config-colors is not set or empty";
}

// Theme colors
@each $name, $color in variables.$color-tokens {
  // Remove "color-" from color-token var
  $_name: mixins.str-replace($name, "color-", "");

  @if (str-index($name, "-on-") == null) {
    .background-#{$_name} {
      background-color: var(--#{$name});
    }
  }

  .text-#{$_name} {
    color: var(--#{$name});
  }
}


@if meta.type-of($all-colors) == "map" {
  @each $name, $color in $all-colors {
    // text color
    .text {
      &--#{$name} {
        color: var(--#{$name}, #{$color}) !important;

        &.pill {
          border-color: var(--#{$name}, #{$color}) !important;
        }
      }

      &-hover--#{$name} {
        transition: background-color var(--transitions);

        &.text-underline--hover {
          &:after {
            background-color: var(--#{$name}, #{$color}) !important;
          }
        }

        &:hover {
          color: var(--#{$name}, #{$color}) !important;
        }
      }
    }


    // background color
    .background {
      &--#{$name} {
        background-color: var(--#{$name}, #{$color}) !important;
        &.button {
          &.loading {
            &:before {
              background-color: var(--#{$name}, #{$color}) !important;
            }
          }
        }
      }


      &-hover--#{$name} {
        transition: background-color var(--transitions);

        &:hover {
          background-color: var(--#{$name}, #{$color}) !important;
        }
      }
    }


    // Add alpha transparency
    @for $i from 1 through 9 {
      .background--#{$name}-a#{$i}0 {
        background-color: var(--#{$name}-a#{$i}0) !important;
      }
    }
  }
}


// error Colors
@if meta.type-of(variables.$error-colors) == "map" {
  @each $name, $color in variables.$error-colors {
    // text color
    .text--#{$name} {
      color: var(--#{$name}, #{$color}) !important;

      &-hover--#{$name} {
        transition: background-color var(--transitions);

        &.text-underline--hover {
          &:after {
            background-color: var(--#{$name}, #{$color}) !important;
          }
        }

        &:hover {
          color: var(--#{$name}, #{$color}) !important;
        }
      }
    }


    // background color
    .background--#{$name} {
      background-color: var(--#{$name}, #{$color}) !important;

      &-hover--#{$name} {
        transition: background-color var(--transitions);

        &:hover {
          background-color: var(--#{$name}, #{$color}) !important;
        }
      }
    }


    // Add alpha transparency
    @for $i from 1 through 9 {
      .background--#{$name}-a#{$i}0 {
        background-color: var(--#{$name}-a#{$i}0) !important;
      }
    }
  }
}


// transparent color
.background--transparent {
  background-color: transparent !important;
}
