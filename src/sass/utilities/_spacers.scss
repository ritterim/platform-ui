@use "../config";
@use "../variables" as variables;
@use "sass:map";

// Spacers
// all around spacing utilities
@each $spacer, $spacerProperty in variables.$spacers {
  @each $size, $sizeValue in variables.$sizes {
    .#{$spacer}-#{$size} {
      #{$spacerProperty}: #{$sizeValue};
    }
  }
}

// all around responsive spacing utilities
@each $breakpoint, $breakpointValue in config.$breakpoints {
  $mapped__keys: map-keys(config.$breakpoints);
  // get index of the current name passed
  $index: (index($mapped__keys, $breakpoint));

  @each $size, $sizeValue in variables.$sizes {
    @each $spacer, $spacerValue in variables.$spacers {
      @if $index > 1 {
        .#{$spacer}-#{$size}\:#{$breakpoint} {
          @media (min-width: $breakpointValue) {
            #{$spacerValue}: $sizeValue;
          }
        }
      }
    }
  }
}

// directional spacing utilities
@each $spacer, $spacerProperty in variables.$spacers {
  @each $direction, $directionValue in variables.$spacerDirections {
    @each $size, $sizeValue in variables.$sizes {
      .#{$spacer}#{$direction}-#{$size} {
        #{$spacerProperty}-#{$directionValue}: #{$sizeValue};
      }
    }
  }
}

// responsive directional spacing utilities
@each $breakpoint, $breakpointValue in config.$breakpoints {
  $mapped__keys: map-keys(config.$breakpoints);
  // get index of the current name passed
  $index: (index($mapped__keys, $breakpoint));

  @each $size, $sizeValue in variables.$sizes {
    @each $direction, $directionValue in variables.$spacerDirections {
      @each $spacer, $spacerValue in variables.$spacers {
        @if $index > 1 {
          .#{$spacer}#{$direction}-#{$size}\:#{$breakpoint} {
            @media (min-width: $breakpointValue) {
              #{$spacerValue}-#{$directionValue}: $sizeValue;
            }
          }
        }
      }
    }
  }
}

.mx-auto {
  margin: 0 auto;
}
