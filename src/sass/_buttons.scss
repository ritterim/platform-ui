@use "config";
@use "mixins" as mixins;
@use "utilities";
@use "variables" as variables;
@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

.button {
  --_button-border: var(
    --button-border, 
    var(--light-3)
  );
  --_button-border-radius: var(
    --button-border-radius, 
    var(--radius-button)
  );
  --_button-background: var(
    --button-background, 
    var(--white)
  );
  --_button-color: var(
    --button-color, 
    var(--base)
  );
  --_button-padding: var(
    --button-padding, 
    .25rem 1rem
  );
  --_button-hover: var(
    --button-hover, 
    #C3552A
  );

  --_button-secondary-background: var(
    --button-secondary-background, 
    var(--salmon)
  );
  --_button-secondary-color: var(
    --button-secondary-color, 
    var(--white)
  );

  align-items: center;
  background-color: var(--_button-background);
  border: 1px solid;
  border-color: var(--_button-border);
  border-radius: var(--_button-border-radius);
  color: var(--_button-color);
  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  line-height: 1.15 !important;
  padding: var(--_button-padding);
  transition: var(--transitions);
  white-space: nowrap;


  &.active,
  &:hover {
    --button-color: var(--white);
    --button-background: #C3552A;

    border-color: initial;
  }


  // .button.disabled
  &:disabled,
  &.disabled {
    --button-background: hsl(
                          var(--light-hue), 
                          var(--light-sat), 
                          calc(var(--light-light) + 10%)
                        )!important;
    --button-border: hsl(
                      var(--light-hue), 
                      var(--light-sat), 
                      calc(var(--light-light) + 10%)
                    )!important;
    --button-color: var(--white);

    background-image: none;
    cursor: not-allowed;

    &:hover {
      border-color: var(--button-border);
    }
  }


  // .button.loading
  &.loading {
    align-items: center;
    overflow: hidden;
    pointer-events: none;
    position: relative;

    &:before {
      --button-background: #C3552A;

      background-color: var(--button-background);
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }

    &:not([data-button-text]):not(.has-text) {
      &:after {
        --loader-border: var(--loader-inverted);

        @extend %loader;
        @include mixins.square(var(--size-3));
        @include mixins.square(var(--size-3), min);
        box-sizing: border-box;
        white-space: inherit;
        content: "";
        display: block;
        left: 50%;
        position: absolute;
        top: 50%;
        margin-left: calc((var(--size-3) / 2) * (-1));
        margin-top: calc((var(--size-3) / 2) * (-1));
      }
    }
  }


  i {
    margin: 0 var(--size-1);
  }


  [aria-hidden="hidden"] {
    pointer-events: none;
  }


  &.button--ghost {
    background-color: transparent;

    &:hover {
      --button-background: #C3552A;
    }
  }
}




// Secondary Button
.button--secondary {
  --button-background: var(--salmon);
  --button-border: var(--salmon);
  --button-color: var(--white);
  --button-border-radius: 50%;
  --_button-shadow: var(--button-shadow, hsl(
                                          var(--salmon-hue), 
                                          var(--salmon-sat), 
                                          calc(var(--salmon-light) + 10%)
                                        ));

  padding: 0;
  width: 2rem;
  height: 2rem;
  @extend %flex-center;


  &.active,
  &:hover {
    --button-background: #C3552A;
    
    box-shadow: 0 0 0 0.3rem var(--_button-shadow);
  }


  &.has-text {
    padding: 0 var(--size-2);
    width: auto;
  }


  &[data-button-text] {
    transition: var(--transitions);

    &:after {
      display: none;
      width: 0;
      content: attr(data-button-text);
    }

    &:hover {
      @include mixins.breakpoint(lg-tablet, min) {
        padding: 0 var(--size-1);
        width: auto;

        &:after {
          width: auto;
          display: inline-block;
          padding-right: var(--size-2);
        }
      }
    }

    &.has-text {
      padding: 0 var(--size-1);

      &:after {
        width: auto;
        display: inline-block;
        padding-right: var(--size-2);
      }
    }
  }

  &.loading {
    &:before {
      box-shadow: 0 0 0 0.3rem 
                  hsl(
                    var(--salmon-hue), 
                    var(--light-sat), 
                    calc(var(--light-light) + 10%)
                  );
    }

    &[data-button-text],
    &.has-text {
      --button-background: #C3552A;

      border-color: inherit;
      box-shadow: 0 0 0 0.3rem 
                  hsl(
                    var(--salmon-hue), 
                    var(--salmon-sat), 
                    calc(var(--salmon-light) + 10%)
                  );
      padding: 0 var(--size-1);
      width: auto;

      &:before {
        @extend %loader;
        @include mixins.square(var(--size-3));
        background-color: unset;
        box-sizing: border-box;
        box-shadow: none;
        content: "";
        display: block;
        border-color: var(--_button-background);
        border-top-color: hsl(
                            var(--base-hue), 
                            var(--base-sat), 
                            calc(var(--base-light) + 20%)
                          );
        left: 0;
        margin: 0 var(--size-1);
        position: relative;
        top: 0;
      }

      &:after {
        content: attr(data-button-text);
        width: auto;
        display: inline-block;
        padding-right: var(--size-2);
      }

      i {
        display: none;
      }
    }
  }
}




// Button Large
.button--lg {
  --button-padding: .5rem 1rem;

  font-size: map.get(variables.$font-scale, "lg");

  &.loading {
    &:not([data-button-text]):not(.has-text) {
      &:after {
        @include mixins.square(calc(var(--size-3) * 1.5));
      }
    }
  }
}




// Button Plain
.button--plain {
  appearance: none;
  background: transparent;
  border: none;
  color: inherit;
}




// Button colors
$button-colors: () !default;

@if meta.type-of(config.$config-colors) == "map" {
  $button-colors: map.merge(config.$config-colors, variables.$greyscale);
} @else {
  $button-colors: map.merge(variables.$greyscale, $button-colors);
  @warn "$config-colors is not set or empty";
}

@if meta.type-of($button-colors) == "map" {
  @each $name, $color in $button-colors {
    .button--#{$name} {
      --button-background: #{$color};
      --button-border: var(--button-background);
      // darken the background--color by 10% on hover
      --button-hover-background: hsl(
                                  var(--#{$name}-hue), 
                                  var(--#{$name}-sat), 
                                  calc(var(--#{$name}-light) - 10%)
                                );

      background-color: var(--button-background);
      border-color: var(--button-border);
      color: var(--button-color);

      // set colors to work based on WCAG AA
      @if lightness($color) > 65 and lightness($color) < 90 {
        --button-color: var(--dark);
      } @else if lightness($color) > 50 and lightness($color) < 65 {
        --button-color: hsl(
                          var(--dark-hue), 
                          var(--dark-sat), 
                          calc(var(--dark-light) - 1%)
                        );
      } @else if lightness($color) > 90 {
        --button-color: var(--base);
      } @else {
        // If the $color is dark, set the color to white and lighten the hover background.
        --button-color: var(--white);
        --button-hover-background: hsl(
                                    var(--#{$name}-hue), 
                                    var(--#{$name}-sat), 
                                    calc(var(--#{$name}-light) + 10%)
                                  );
      }

      
      &:hover {
        background-color: var(--button-hover-background);
        border-color: var(--button-hover-background);
        color: var(--button-color);
      }


      &.button--secondary {
        // lighten the box-shadow by 10% of background--color
        --box-shadow: hsl(
          var(--#{$name}-hue), 
          var(--#{$name}-sat), 
          calc(var(--#{$name}-light) + 10%)
        );

        @if lightness($color) <= 50 {
          // For our darkest buttons we lighten the box-shadow by 30%
          --box-shadow: hsl(
                          var(--#{$name}-hue), 
                          var(--#{$name}-sat), 
                          calc(var(--#{$name}-light) + 30%)
                        );
        } @else if lightness($color) > 90 {
          // if the colors lightness value is greater than 90% only lighten the box-shadow be 2%
          --box-shadow: hsl(
                          var(--#{$name}-hue), 
                          var(--#{$name}-sat), 
                          calc(var(--#{$name}-light) + 2%)
                        );
        }

        &.active,
        &:hover {
          // border-color: initial - same as standard .button
          border-color: initial;
          box-shadow: 0 0 0 0.3rem var(--box-shadow);
        }
      }

      &.button--ghost {
        --button-color: #{$color};
        --button-hover-background: #{$color};

        &:hover {
          background-color: var(--button-hover-background);

          // set colors to work based on WCAG AA
          @if lightness($color) > 65 and lightness($color) < 90 {
            color: var(--dark);
          } @else if lightness($color) > 50 and lightness($color) < 65 {
            color: hsl(
                    var(--dark-hue), 
                    var(--dark-sat), 
                    calc(var(--dark-light) - 1%)
                  );
          } @else if lightness($color) > 90 {
            color: var(--base);
          } @else {
            // If the $color is dark, set the color to white and lighten the hover background.
            color: var(--white);
          }
        }
      }
    }
  }
}



// Button Group
.button-group {
  display: flex;
  gap: var(--size-2);
}
