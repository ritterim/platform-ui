@use "config";
@use "mixins";
@use "variables";
@use "sass:color";
@use "sass:map";
@use "sass:math";

// Forms
//
// Out of the box, our form fields have a margin-top added to them. This spacing should work just fine for smaller, simple forms. For larger,
// responsive forms, we recommend that you utilize the block layout and our spacers to build the perfect form.
// 
// **Note** All of the following form elements must be nested inside the `form` class to get the desired look.
//
// Markup:
// <form action="" class="form">
//   <label for="first-name-a" class="form__field">First Name
//     <input id="first-name-a" type="text" placeholder="First Name">
//   </label>
//   <label for="last-name" class="form__field">Last Name
//     <input id="last-name" type="text" placeholder="Last Name">
//   </label>
// </form>
// 
//
// Styleguide Forms

// Fancy Forms
//
// You want a fancy form that animates the `label`? You got it.
// To get the animation, add the class `form__field--fancy` to the `form__field`.
// You will also need to change the markup slightly. Instead of a `label` the `form__field` should now be a `div`
// put the `label` under the `input` as a sibling of the `form__field` `div`. See markup below.
//
// **Note:** Firefox does not have a way to hide the date and time placeholder for those inputs. This style of form would
// probably be best for a simple form that has text inputs.
//
// Markup:
// <form action="" class="form">
//   <div class="form__field form__field--fancy">
//     <input id="first-name" type="text" required placeholder="Jane">
//     <label for="first-name">First Name</label>
//   </div>
//   <div class="form__field form__field--fancy">
//     <input id="last-name" type="text" required placeholder="Smith">
//     <label for="last-name">Last Name</label>
//   </div>
//   <div class="form__field form__field--fancy">
//     <input id="zipcode" type="tel" pattern="^\d{5,6}(?:[-\s]\d{4})?$" required placeholder="12345">
//     <label for="zipcode">ZIP Code</label>
//   </div>
//   <div class="form__field form__field--fancy">
//     <div class="form__select-wrapper">
//       <select name="Option Select" id="Option" required placeholder="Option">
//         <option value=""></option>
//         <option value="Option1">Option 1</option>
//         <option value="Option2">Option 2</option>
//         <option value="Option3">Option 3</option>
//         <option value="Option4">Option 4</option>
//         <option value="Option5">Option 5</option>
//         <option value="Option6">Option 6</option>
//       </select>
//       <label for="Option">Option</label>
//     </div>
//   </div>
// </form>
//
// Styleguide Forms.Fancy


// Form Border
//
// This modifier class adds a full border to each input within the form. Just add `form--bordered`
//
// Markup:
// <form action="" class="form form--bordered block-container tablet-up-3 laptop-up-4 desktop-up-6 blocks mb-3 p-2">
//   <div class="block">
//     <label for="first-name" class="form__field">First Name
//       <input id="first-name" type="text" placeholder="First Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="last-name" class="form__field">Last Name
//       <input id="last-name" type="text" placeholder="Last Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="dob" class="form__field">Birthday
//       <input id="dob" type="date">
//     </label>
//   </div>
//   <div class="block">
//     <label for="zipcode" class="form__field">ZIP Code
//       <input id="zipcode" type="tel" placeholder="e.g.90012" pattern="^\d{5,6}(?:[-\s]\d{4})?$">
//     </label>
//   </div>
// </form>
//
// Styleguide Forms.Border


// Form Rounded Border
//
// This modifier class adds a full border with a `5rem` radius to each input within the form. Just add `form--rounded`.
// If you want to give the label an indented look, we suggest moving the `form__field` class to a wrapping div containing 
// both the `label` and `input` as siblings. This way, you can add something like `ml-2` to the label to align it closer to 
// the padding of the rounded input. Checkout the markup below.
//
// Markup:
// <form action="" class="form form--rounded block-container tablet-up-3 laptop-up-4 desktop-up-6 blocks mb-3 p-2">
//   <div class="block form__field">
//     <label class="ml-2" for="first-name">First Name</label>
//     <input id="first-name" type="text" placeholder="First Name">
//   </div>
//   <div class="block form__field">
//     <label class="ml-2" for="last-name">Last Name</label>
//     <input id="last-name" type="text" placeholder="Last Name">
//   </div>
//   <div class="block form__field">
//     <label class="ml-2" for="dob">Birthday</label>
//     <input id="dob" type="date">
//   </div>
//   <div class="block form__field">
//     <label class="ml-2" for="zipcode">ZIP Code</label>
//     <input id="zipcode" type="tel" placeholder="e.g.90012" pattern="^\d{5,6}(?:[-\s]\d{4})?$">
//   </div>
// </form>
//
// Styleguide Forms.BorderRounded


// Time Icon
//
// The select wrapper displays an arrow down icon. We can change that by adding the class `time`
// to the class `form__select-wrapper`. So the classes would be `form__select-wrapper time`.
// This will replace the arrow down icon with a clock icon.
//
// Markup:
// <form action="" class="form block-container">
//   <div class="block block-4">
//     <label for="task-1-time" class="form__field">
//       <span class="sr-only">Time Icon Example</span>
//       <div class="form__select-wrapper time" id="task-1-time">
//         <select class="px-2" name="Select a time" id="task-1-time-select">
//           <option value="8:00 AM">8:00 AM</option>
//           <option value="8:30 AM">8:30 AM</option>
//           <option value="9:00 AM">9:00 AM</option>
//           <option value="9:30 AM">9:30 AM</option>
//           <option value="10:00 AM">10:00 AM</option>
//           <option value="10:30 AM">10:30 AM</option>
//         </select>
//         <i class="pi-clock"></i>
//       </div>
//     </label>
//   </div>
// </form>
//
// Styleguide Forms.TimeIcon


// Error styles
//
// If there is an error on a specific input after submission, add the `error` class to the specific `form__field`. 
// **Note** If you add the `error` class to a `form__field` that contains check boxes or radios, each input in that
// field will receive the error styling. However, if you only want to highlight on specific check or radio, simply add
// `error` to the proper input. This will give the icon as well as the corresponding label the error style.
//
// Markup:
// <form action="" class="form block-container tablet-up-3 laptop-up-4 desktop-up-6 blocks mb-3 p-2">
//   <div class="block">
//     <label for="first-name" class="form__field">First Name
//       <input id="first-name" type="text" placeholder="First Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="last-name" class="form__field error">Last Name
//       <input id="last-name" type="text" placeholder="Last Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="dob" class="form__field">Birthday
//       <input id="dob" type="date">
//     </label>
//   </div>
//   <div class="block">
//     <label for="zipcode" class="form__field">ZIP Code
//       <input id="zipcode" type="tel" placeholder="e.g.90012" pattern="^\d{5,6}(?:[-\s]\d{4})?$">
//     </label>
//   </div>
//   <div class="block">
//     <fieldset class="form__field error">
//       <legend>Error on entire fieldset</legend>
//       <div class="form__option-group">
//         <input class="form__checkbox" id="youcan-this-one" type="checkbox">
//         <label for="youcan-this-one">
//           <div class="input-icons">
//             <i class='pi-circle'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>This
//         </label>
//         <input class="form__checkbox" id="youcan-that-one" type="checkbox">
//         <label for="youcan-that-one">
//           <div class="input-icons">
//             <i class='pi-circle'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>That
//         </label>
//       </div>
//     </fieldset>
//     </div>
//     <div class="block">
//     <fieldset class="form__field">
//       <legend>Error on individual input</legend>
//       <div class="form__option-group">
//         <input class="form__checkbox error" id="gender-this-one" type="checkbox">
//         <label for="gender-this-one">
//           <div class="input-icons">
//             <i class='pi-circle'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           This One
//         </label>
//         <input class="form__checkbox" id="gender-that-one" type="checkbox">
//         <label for="gender-that-one">
//           <div class="input-icons">
//             <i class='pi-circle'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           That One
//         </label>
//       </div>
//     </fieldset>
//   </div>
// </form>
//
// Styleguide Forms.Error



// Has Icon
//
// If you would like the icon to be on the right side of the input, add the class `has-icon--right` to the `form__field` class.
//
// Markup:
// <form action="" class="form block-container tablet-up-3 laptop-up-4 desktop-up-6 blocks mb-3 p-2">
//   <div class="block">
//     <label for="dob" class="form__field has-icon--right">Birthday
//       <input id="dob" type="date">
//       <i class="pi-calendar background-white"></i>
//     </label>
//   </div>
//   <div class="block">
//     <label for="date" class="form__field has-icon">Date
//       <input id="date" type="date">
//       <i class="pi-calendar text-med-blue background-white"></i>
//     </label>
//   </div>
//   <div class="block">
//     <label for="time" class="form__field has-icon--right">Your Time
//       <input id="time" type="time" placeholder="10:00 AM">
//       <i class="pi-clock"></i>
//     </label>
//   </div>
//   <div class="block">
//     <div class="form__field form__button-group">
//       <button class="button button--post button--lg">Submit</button>
//     </div>
//   </div>
// </form>
//
// Styleguide Forms.HasIcon



// Input - Checkbox
//
// The platform check boxes require some specific markup to get the look you see in the example below.
// In this case, be sure to add `<div class="input-icons">` your label. Inside this `<div class="input-icons">`
// add the font icons for the look of the checkbox, in this case we need `<i class='pi-circle pi-lg'></i>` and
// `<i class='pi-check'></i>`. Each of these need to be siblings, nested inside the `input-icons` wrapper. Be
// sure to add the `pi-lg` class to the `pi-circle` icon. This way, the circle will be large enough to allow the
// checkmark to fit properly. You can try different sizes for the icons by using the font icons [size utilities](/section-icons.html#icons-sizing). 
// 
// You can wrap the inputs and labels in the class `form__option-group`. This class will ensure the proper top margin,
// consistent with the rest of the form elements. It also allows the inputs inside the field to wrap using `display: flex`
//  and `flex-wrap: wrap`. If you do not want the items to wrap, but rather look like block level elements, you can simplay add
// different utility classes to the `form__option-group` wrapper. In this case, `flex--column` and `flex--nowrap`.
// 
// **Note** For better semantics, it would be best to wrap the check boxes in a `fieldset` using this element as your
// `form__field` then adding a `legend`. See the example below.
// 
// Markup:
// <form action="" class="form block-container">
//   <div class="block block-4">
//     <fieldset class="form__field">
//       <legend>Choose</legend>
//       <div class="form__option-group">
//         <input id="choose-this-one" type="checkbox">
//         <label for="choose-this-one">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           This One
//         </label>
//         <input id="choose-that-one" type="checkbox">
//         <label for="choose-that-one">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           That One
//         </label>
//         <input id="choose-that-one-2" type="checkbox">
//         <label for="choose-that-one-2">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           Or This One
//         </label>
//         <input id="choose-that-one-3" type="checkbox">
//         <label for="choose-that-one-3">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           Or Even That One
//         </label>
//       </div>
//     </fieldset>
//   </div>
// </form>
//
// Styleguide Forms.InputCheckbox



// Input - Radio
//
// Radio buttons in platform UI are almost identical to how the check boxes work. Only different here is the input type
// and the font icon that shows when the input is checked.
// 
// The platform radios require some specific markup to get the look you see in the example below.
// In this case, be sure to add `<div class="input-icons">` your label. Inside this `<div class="input-icons">`
// add the font icons for the look of the radio, in this case we need `<i class='pi-circle pi-lg'></i>` and
// `<i class='pi-circle-solid'></i>`. Each of these need to be siblings, nested inside the `input-icons` wrapper. Be
// sure to add the `pi-lg` class to the `pi-circle` icon. This way, the circle will be large enough to allow the
// dot to fit properly. You can try different sizes for the icons by using the font icons [size utilities](/section-icons.html#icons-sizing). 
// 
// You can wrap the inputs and labels in the class `form__option-group`. This class will ensure the proper top margin,
// consistent with the rest of the form elements. It also allows the inputs inside the field to wrap using `display: flex`
//  and `flex-wrap: wrap`. If you do not want the items to wrap, but rather look like block level elements, you can simplay add
// different utility classes to the `form__option-group` wrapper. In this case, `flex--column` and `flex--nowrap`.
// 
// **Note** For better semantics, it would be best to wrap the radios in a `fieldset` using this element as your
// `form__field` then adding a `legend`. See the example below.
// 
// Markup:
// <form action="" class="form block-container">
//   <div class="block block-4">
//     <fieldset class="form__field">
//       <legend>Pick one</legend>
//       <div class="form__option-group">
//         <input id="choose-big" type="radio" name="choose-one">
//         <label for="choose-big">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Big
//         </label>
//         <input id="choose-small" type="radio" name="choose-one">
//         <label for="choose-small">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Small
//         </label>
//         <input id="choose-bigger" type="radio" name="choose-one">
//         <label for="choose-bigger">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Bigger
//         </label>
//         <input id="choose-smaller" type="radio" name="choose-one">
//         <label for="choose-smaller">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Smaller
//         </label>
//       </div>
//     </fieldset>
//   </div>
// </form>
//
// Styleguide Forms.InputRadio


// Putting it together
// 
// Here's an example of a larger responsive form using the block layout.
// 
// <form action="" class="form block-container tablet-up-3 laptop-up-4 desktop-up-6 blocks mb-3 p-2">
//   <div class="block">
//     <label for="first-name" class="form__field">First Name
//       <input id="first-name" type="text" placeholder="First Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="last-name" class="form__field">Last Name
//       <input id="last-name" type="text" placeholder="Last Name">
//     </label>
//   </div>
//   <div class="block">
//     <label for="dob" class="form__field">Birthday
//       <input id="dob" type="date">
//     </label>
//   </div>
//   <div class="block">
//     <label for="zipcode" class="form__field">ZIP Code
//       <input id="zipcode" type="tel" placeholder="e.g.90012" pattern="^\d{5,6}(?:[-\s]\d{4})?$">
//     </label>
//   </div>
//   <div class="block">
//     <fieldset class="form__field">
//       <legend>Choose</legend>
//       <div class="form__option-group">
//         <input class="form__checkbox" id="gender-this-one" type="checkbox">
//         <label for="gender-this-one">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           This One
//         </label>
//         <input class="form__checkbox" id="gender-that-one" type="checkbox">
//         <label for="gender-that-one">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-check pi-heavy'></i>
//           </div>
//           That One
//         </label>
//       </div>
//     </fieldset>
//   </div>
//   <div class="block">
//     <fieldset class="form__field">
//       <legend>Gender</legend>
//       <div class="form__option-group">
//         <input class="form__radio" id="gender-male" type="radio" name="gender">
//         <label for="gender-male">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Male
//         </label>
//         <input class="form__radio" id="gender-female" type="radio" name="gender">
//         <label for="gender-female">
//           <div class="input-icons">
//             <i class='pi-circle pi-lg'></i>
//             <i class='pi-circle-solid'></i>
//           </div>
//           Female
//         </label>
//       </div>
//     </fieldset>
//   </div>
//   <div class="block">
//     <label for="Option" class="form__field">Option
//       <div class="form__select-wrapper">
//         <select name="Option Select" id="Option">
//           <option value="Option1">Option 1</option>
//           <option value="Option2">Option 2</option>
//           <option value="Option3">Option 3</option>
//           <option value="Option4">Option 4</option>
//           <option value="Option5">Option 5</option>
//           <option value="Option6">Option 6</option>
//         </select>
//       </div>
//     </label>
//   </div>
//   <div class="block">
//     <fieldset class="form__field">
//       <legend>Are You</legend>
//       <div class="toggle">
//         <div class="toggle__content">
//           <input id="tall" type="radio" checked name="height">
//           <label for="tall"><i class='pi-check pi-heavy'></i> Tall</label>
//         </div>
//         <div class="toggle__content">
//           <input id="short" type="radio" name="height">
//           <label for="short"><i class='pi-check pi-heavy'></i> Short</label>
//         </div>
//       </div>
//     </fieldset>
//   </div>
//   <div class="block">
//     <label for="date-1" class="form__field has-icon">Date
//       <input id="date-1" type="date">
//       <i class="pi-calendar text-skyblue background-white"></i>
//     </label>
//   </div>
//   <div class="block">
//     <label for="time" class="form__field">Your Time
//       <input id="time" type="time" placeholder="10:00 AM">
//     </label>
//   </div>
//   <div class="block">
//     <div class="form__field form__button-group">
//       <button class="button button--post button--lg">Submit</button>
//     </div>
//   </div>
// </form>
// 
// 
// Styleguide Forms.Putting



// Select
// 
// To get this look you see in the example below, be sure to wrap your `select` in the class, `form__select-wrapper`.
// This allows for the angle down arrow to show. We're using a pseudo element to create the angle down arrow here. Since
// you can not add a pseudo element to a `select` we wrapped it in a `div`. The class, `form__select-wrapper` also 
// allows for consistent spacing with the other form elements. If you wish to have a different arrow, you can remove the 
// `form__select-wrapper` class but be sure to add the proper top margin to the element you use to wrap your `select`.
// 
// 
// Markup:
// <form action="" class="form block-container">
//   <div class="block block-4">
//     <label for="Option" class="form__field">Option
//       <div class="form__select-wrapper">
//         <select name="Option Select" id="Option">
//           <option value="Option1">Option 1</option>
//           <option value="Option2">Option 2</option>
//           <option value="Option3">Option 3</option>
//           <option value="Option4">Option 4</option>
//           <option value="Option5">Option 5</option>
//           <option value="Option6">Option 6</option>
//         </select>
//       </div>
//     </label>
//   </div>
// </form>
// 
// Styleguide Forms.Selects


// KSS-Node specific stuff for forms
#kss-node {

  #kssref-forms-fancy {

    .kss-modifier__heading {
      margin-bottom: 2rem;
    }
  }
}



fieldset {
  margin: 0;
  padding: 0;
  border: 0;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

.pui-form,
.form {
  $error-color: color.adjust(map.get(variables.$error-colors, 'negative'), $lightness: math.percentage(-(config.$hue-threshold * 2)));
  $error-background: map.get(variables.$message-colors, 'error' );

  color: color.adjust(map.get(variables.$greyscale, 'base' ), $lightness: math.percentage(.05));

  .input-icons {
    left: 0; top: 0;
    margin-right: map.get(variables.$spacers, 2);
    position: relative;
    @include mixins.square(1.5rem);

    [class^="pi-"] {
      line-height: 1;
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);      

      &:nth-of-type(2) {
        transform: translate(-50%, -50%) scale(0);
        transition: transform config.$duration ease;
      }
    }
  }

  input[type="checkbox"],
  input[type="radio"] {
    opacity: 0;
    position: absolute;
    width: auto;
  
    &:checked + label {      
  
      .input-icons {

        [class^="pi-"]:nth-of-type(2) {
          transform: translate(-50%, -50%) scale(1);
        }
      }
    }
  
    + label {
      align-items: center;
      color: map.get(variables.$greyscale, 'base');
      cursor: pointer;
      display: flex;
      font-weight: 400;
      margin-right: variables.$spacer;
      margin-top: variables.$spacer * .75;
      position: relative;
      vertical-align: baseline;
    }

    &.error {

      + label {
        color: $error-color;
      }
    }
  }
  
  input[type="radio"] {
  
    &:checked + label {
      cursor: default;
    }
  }

  &--stacked {
    flex-flow: column;

    .pui-form__field,
    .form__field {
      max-width: none;

      &:last-child {
        margin-bottom: 0;
      }
    }

    .pui-form__button-group,
    .form__button-group {
      justify-content: center;

      button {
        max-width: none;
      }
    }

    textarea {
      min-height: 8rem;
    }
  }

  &.pui-form--light,
  &.form--light {
    color: map.get(variables.$greyscale, 'white' );

    input[type="text"],
    input[type="search"],
    input[type="date"],
    input[type="email"],
    input[type="textarea"],
    input[type="tel"],
    input[type="password"],
    input[type="number"],
    input[type="time"],
    input[type="url"],
    input[type="datetime-local"],
    input[type="month"],
    input[type="week"],
    textarea,
    select {
      border-bottom-color: map.get(variables.$greyscale, 'white' );
      color: map.get(variables.$greyscale, 'white' );

      &::placeholder {
        color: map.get(variables.$greyscale, 'white' );
      }
    }

    input[type="checkbox"],
    input[type="radio"] {

      + label {
        color: map.get(variables.$greyscale, 'white');

        &:before {
          border: 1px solid;
          border-color: inherit;
        }
      }
    }

    input[type="checkbox"] {

      + label {

        &:after {
          color: map.get(variables.$greyscale, 'white');
        }
      }
    }

    textarea {
      border-color: map.get(variables.$greyscale, 'white' );
    }

    .pui-form__select-wrapper,
    .form__select-wrapper {

      &:after {
        border-color: map.get(variables.$greyscale, 'white' );
      }
    }
  }

  &.pui-form--bordered,
  &.form--bordered {

    input[type="text"],
    input[type="search"],
    input[type="date"],
    input[type="email"],
    input[type="textarea"],
    input[type="tel"],
    input[type="password"],
    input[type="number"],
    input[type="time"],
    input[type="url"],
    input[type="datetime-local"],
    input[type="month"],
    input[type="week"],
    textarea,
    select {
      border-color: map.get(variables.$greyscale, 'light' );
      border-radius: map.get(config.$radius, 'default' );
    }
  }

  &__field {
    display: block;

    input[type="text"],
    input[type="search"],
    input[type="date"],
    input[type="email"],
    input[type="textarea"],
    input[type="tel"],
    input[type="password"],
    input[type="number"],
    input[type="time"],
    input[type="url"],
    input[type="datetime-local"],
    input[type="month"],
    input[type="week"],
    textarea,
    .pui-form__select-wrapper,
    .form__select-wrapper,
    .pui-form__option-group,
    .form__option-group {
      margin-top: map.get(variables.$spacers, 2);
      width: 100%;
    }

    &.has-icon {
      position: relative;

      input[type="text"],
      input[type="search"],
      input[type="date"],
      input[type="email"],
      input[type="textarea"],
      input[type="tel"],
      input[type="password"],
      input[type="number"],
      input[type="time"],
      input[type="url"],
      input[type="datetime-local"],
      input[type="month"],
      input[type="week"],
      textarea,
      select {
        padding-left: map.get(variables.$spacers, 4);
      }

      i {
        bottom: 0;
        font-size: map.get(variables.$font-percentage, 'md');
        left: .5rem;
        line-height: 1;
        position: absolute;
        transform: translateY(-50%);
      }

      &--right {
        position: relative;

        i {
          bottom: 0;
          color: map.get(config.$brand-colors, 'med-blue' );
          font-size: map.get(variables.$font-percentage, 'md');
          line-height: 1;
          pointer-events: none;
          position: absolute;
          transform: translateY(-50%);
          right: .5rem;
        }

        input[type="text"],
        input[type="search"],
        input[type="date"],
        input[type="email"],
        input[type="textarea"],
        input[type="tel"],
        input[type="password"],
        input[type="number"],
        input[type="time"],
        input[type="url"],
        input[type="datetime-local"],
        input[type="month"],
        input[type="week"],
        textarea,
        select {
          padding-right: map.get(variables.$spacers, 4);
        }

        input[type="date"],
        input[type="time"] {
          &::-webkit-calendar-picker-indicator,
          &::-webkit-inner-spin-button {
            opacity: 0;
          }
        }

      }

      input[type="date"],
      input[type="time"] {
        &::-webkit-calendar-picker-indicator,
        &::-webkit-inner-spin-button {
          opacity: 0;
        }
      }

    }

    &.error {
      color: $error-color!important;

      input[type="text"],
      input[type="search"],
      input[type="date"],
      input[type="email"],
      input[type="textarea"],
      input[type="tel"],
      input[type="password"],
      input[type="number"],
      input[type="time"],
      input[type="url"],
      input[type="datetime-local"],
      input[type="month"],
      input[type="week"],
      textarea,
      select {
        background-color: $error-background;
        border-color: $error-color !important;
        border-radius: map.get(config.$radius, 'default' );
        padding-left: map.get(variables.$spacers, 2 );
      }

      input[type="checkbox"],
      input[type="radio"] {

        &:not(:checked) + label {
          color: $error-color;

          [class^="pi-"] {
            color: $error-color !important;
          }
        }
      }
    }

    // Fancy label animations
    &.pui-form__field--fancy,
    &.form__field--fancy {
      position: relative;

      &.error {

        label {
          color: $error-color!important;
          font-size: 80%;
          top: -1rem;
          transform: translate(0) scale(1);
          left: 0;
        }

        input:not([type=checkbox]),
        input:not([type=radio]),
        textarea {
          background-color: $error-background;
          border: 1px solid $error-color !important;
          box-shadow: 0 0 2px 0 $error-color !important;
        }

        ::-webkit-input-placeholder,
        :-moz-placeholder {
          opacity: 1;
          transition: inherit;
        }
      }

      input:not([type=checkbox]),
      input:not([type=radio]),
      textarea {
        background: transparent;
        border: none;
        border-bottom: 1px solid map.get(variables.$greyscale, 'light' );
        border-radius: 0;
        color: map.get(variables.$greyscale, 'base' );
        padding: map.get(variables.$spacers, 1 );
        transition: .2s ease-in;

        &:focus ~ label,
        &:valid ~ label {
          font-size: 80%;
          top: -1rem;
          left: 0;
        }

        &:focus {
          border-bottom-color: map.get(config.$brand-colors, 'med-blue' ) !important;
          outline: none !important;
        }
      }

      input::-webkit-datetime-edit {
        color: transparent;
      }

      input::-moz-datetime-edit {
        color: transparent;
      }

      input:focus::-webkit-datetime-edit,
      input:valid::-webkit-datetime-edit {
        color: map.get(variables.$greyscale, 'base' );
      }

      ::-webkit-input-placeholder {
        /* WebKit browsers */
         color: transparent !important;
      }
      ::-moz-placeholder {
          /* Mozilla Firefox 19+ */
          color: transparent !important;
      }

      input::placeholder {
          color: transparent !important;
      }

      ::-moz-placeholder {
        color: transparent !important;
      }

      input:focus::-webkit-input-placeholder {
        color: map.get(variables.$greyscale, 'base' )!important;
      }

      input:focus::-moz-placeholder {
        color: map.get(variables.$greyscale, 'base' )!important;
      }

      input:focus + label {
        transform: translate(0, 0) scale(1);
        cursor: pointer;
      }

      .pui-form__select-wrapper,
      .form__select-wrapper {
        position: static;
      }

      select {
        padding-left: map.get(variables.$spacers, 1 );

        &:focus ~ label,
        &:valid ~ label {
          font-size: 80%;
          top: -1rem;
          left: 0;
        }

        &:focus {
          border-bottom-color: map.get(config.$brand-colors, 'med-blue' ) !important;
          outline: none !important;
        }
      }

      label {
        color: map.get(variables.$greyscale, 'light' );
        pointer-events: none;
        position: absolute;
        left: .25rem;
        line-height: 1;
        top: 50%;
        transition: .2s ease-in;
        transform: translateY(-50%);
      }
    }
  }

  &__option-group {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    &.option-group--block {
      display: block;
    }
    &.option-group--overflow {
      max-height: 20vh;
      overflow: auto;
    }
  }


  &__button-group {
    align-items: flex-end;
    display: flex;
    justify-content: flex-start;
    margin-left: -.25rem;
    width: calc(100% + .25rem * 2);

    button {
      flex-grow: 1;
      margin: .25rem;
      max-width: 14.375rem;
    }
  }

  input[type="text"],
  input[type="search"],
  input[type="date"],
  input[type="email"],
  input[type="textarea"],
  input[type="tel"],
  input[type="password"],
  input[type="number"],
  input[type="time"],
  input[type="url"],
  input[type="datetime-local"],
  input[type="month"],
  input[type="week"],
  textarea,
  select {
    background-color: transparent;
    border: 1px solid transparent;
    border-bottom-color: map.get(variables.$greyscale, 'light' );
    border-radius: 0; // specify no border-radius to override mobile user agent styles
    color: map.get(variables.$greyscale, 'base' );
    display: block;
    font-family: map.get(config.$fonts, 'base');
    font-size: map.get(config.$fonts, 'size');
    min-height: 2.2rem;
    padding: map.get(variables.$spacers, 1 ) map.get(variables.$spacers, 2 );
    width: 100%;

    &::placeholder {
      color: map.get(variables.$greyscale, 'base' );
    }

    &:focus {
      outline: none;
      border-bottom-color: map.get(config.$site-colors, 'focus' );
      box-shadow: 0 0 2px 0 map.get(config.$site-colors, 'focus' );
      transition: box-shadow config.$duration, border-color config.$duration ease-in-out, border-width config.$duration ease;
    }
  }

  input[type="text"],
  input[type="search"],
  input[type="email"],
  input[type="textarea"],
  input[type="tel"],
  input[type="password"],
  input[type="number"],
  input[type="url"],
  input[type="datetime-local"],
  input[type="month"],
  input[type="week"] {

    &.readonly {
      transition: config.$transitions;

      &[readonly] {
        border-bottom-color: transparent;
        pointer-events: none;
      }
    }
  }

  textarea {
    border-color: map.get(variables.$greyscale, 'light' );
    padding: map.get(variables.$spacers, 1);
    width: 100%;

    &.readonly {
      transition: config.$transitions;

      &[readonly] {
        border-color: transparent;
        pointer-events: none;
        resize: none;
      }
    }
  }

  &__select-wrapper {
    position: relative;

    &:after {
      border: 1px solid map.get(variables.$greyscale, 'base' );
      border-width: 0 0 1px 1px;
      content: '';
      height: .3rem;
      pointer-events: none;
      position: absolute;
      right: .3rem;
      top: 50%;
      transform: rotate(-45deg) translateY(-50%);
      width: .3rem;
    }

    &.time {

      &:after {
        display: none;
      }

      i {
        position: absolute;
        top: .75rem;
        right: 0;
      }
    }
  }

  select {
    -webkit-appearance: none;
    appearance: none;
    border-radius: 0;
    padding: map.get(variables.$spacers, 1) variables.$spacer map.get(variables.$spacers, 1) map.get(variables.$spacers, 2);
  }

  input[type="date"],
  input[type="time"],
  input[type="datetime-local"] {
    appearance: textfield;
    display: inline-flex;

    &::-webkit-clear-button {
      margin-right: -.75rem;
    }
  }


  // form--rounded
  &--rounded {

    input[type="text"],
    input[type="search"],
    input[type="date"],
    input[type="email"],
    input[type="textarea"],
    input[type="tel"],
    input[type="password"],
    input[type="number"],
    input[type="time"],
    input[type="url"],
    input[type="datetime-local"],
    input[type="month"],
    input[type="week"],
    textarea,
    select {
      border-color: map.get(variables.$greyscale, 'light' );
      border-radius: map.get(config.$radius, 'button' );
    }

    .has-icon {

      i {
        left: .75rem;
      }
    }

    .has-icon--right {

      i {
        right: .75rem;
      }
    }

    .pui-form__select-wrapper,
    .form__select-wrapper {

      &:after {
        right: .7rem;
      }
    }
  }
}

// Readonly Input
//
// This style is for editable inputs as well as textareas. If you want to display the text or value of an
// input but disable the ability to edit it, add the `readonly` attribute as well as the class `readonly`
// to the input or textarea. In your javascript only toggle the `readonly` attribute on or off when the user
// would select the option to edit the text.
//
// | <i class="pi-warning text-orange"></i> NOTE: The `js-` classes in the example below are just for test purposes. You do not need them.** |
// | --
//
// Markup:
// <form action="" class="pui-form">
//   <div class="block-container">
//     <div class="block block-10">
//       <label for="first-name" class="pui-form__field">
//         <span class="sr-only">Read only input example</span>
//         <input id="first-name" type="text" placeholder="First Name" class="readonly" readonly value="This is a readonly input. When you select edit, the readonly attribute will be removed.">
//       </label>
//     </div>
//     <div class="block block-2 flex flex--align-center flex--justify-end">
//       <div class="icon-menu">
//         <div class="icon-menu__item">
//           <a href="#" class="icon-menu__action text-positive--hover js-edit-readonly" role="button">
//             <i class="pi-edit" aria-hidden="hidden"></i>
//           </a>
//         </div>
//         <div class="icon-menu__item">
//           <a href="#" class="icon-menu__action text-negative--hover" role="button">
//             <i class="pi-trash" aria-hidden="hidden"></i>
//           </a>
//         </div>
//       </div>
//     </div>
//     </div>
//     <div class="block-container">
//     <div class="block block-10">
//       <label for="message" class="pui-form__field">
//         <span class="sr-only">Read only input example</span>
//         <textarea id="message" name="message" class="readonly js-textarea" readonly>This is a readonly textarea. When you select edit, the readonly attribute will be removed.</textarea>
//       </label>
//     </div>
//     <div class="block block-2 flex flex--align-center flex--justify-end">
//       <div class="icon-menu">
//         <div class="icon-menu__item">
//           <a href="#" class="icon-menu__action text-positive--hover js-edit-textarea" role="button">
//             <i class="pi-edit" aria-hidden="hidden"></i>
//           </a>
//         </div>
//         <div class="icon-menu__item">
//           <a href="#" class="icon-menu__action text-negative--hover" role="button">
//             <i class="pi-trash" aria-hidden="hidden"></i>
//           </a>
//         </div>
//       </div>
//     </div>
//   </div>
// </form>
//
// Styleguide Forms.Readonly



// Togles
// ------

// Toggle Option
// 
// To create this toggle effect around 2 radio buttons you need to wrap the set of inputs in a `<div class="pui-toggle">`.
// From there, be sure to add your input, followed by it's label. These elements should be sibligns of one another and
// children of the `pui-toggle`. Each pair of inputs and children should be siblings of one another.
// 
// From a semantic perspective, we would recommend _not_ using check boxes inside the toggle. The reason being that one
// option needs to be checked for the toggle to make sense. Also, the toggle works so you that you could never select both
// options.
// 
// We put the toggle inside a `fieldset` in the example below, but this is not required for the toggle to work.
// 
// Markup:
// <form class="pui-form">
//   <div class="block-container">
//     <fieldset class="pui-form__field block-4">
//       <legend>Are You</legend>
//       <div class="pui-toggle">
//         <input id="Tall-2" type="radio" checked name="height">
//         <label for="Tall-2">
//           <i class='pi-check pi-heavy'></i> Tall
//         </label>
//         <input id="Short-2" type="radio" name="height">
//         <label for="Short-2">
//           <i class='pi-check pi-heavy'></i> Short
//         </label>
//       </div>
//     </div>
//   </fieldset>
// </form>
// 
// Styleguide Forms.Toggle


// Toggle Option Disabled
// 
// If the toggle needs to be disabled, simply add the attribute `disabled` to a `fieldset` wrapping the `pui-toggle`. See the markup below.
// 
// Markup:
// <form class="pui-form">
//   <div class="block-container">
//     <fieldset class="pui-form__field block-4" disabled>
//       <legend>Are You</legend>
//       <div class="pui-toggle">
//         <input id="Tall-2" type="radio" checked name="height">
//         <label for="Tall-2">
//           <i class='pi-check pi-heavy'></i> Tall
//         </label>
//         <input id="Short-2" type="radio" name="height">
//         <label for="Short-2">
//           <i class='pi-check pi-heavy'></i> Short
//         </label>
//       </div>
//     </div>
//   </fieldset>
// </form>
// 
// Styleguide Forms.ToggleDisabled

.pui-toggle,
.toggle {
  border: 1px solid map.get(variables.$greyscale, 'light' );
  border-radius: map.get(config.$radius, 'button');
  display: flex;
  justify-content: space-between;
  margin-top: map.get(variables.$spacers, 2);
  min-height: 2.2rem;
  padding: map.get(variables.$spacers, 1);

  &__content {
    display: flex;
    flex: 1 1 auto;
  }

  input[type="checkbox"],
  input[type="radio"] {
    opacity: 0;
    position: absolute;
    width: auto;
  
    &:checked + label {      
  
      .input-icons {

        [class^="pi-"]:nth-of-type(2) {
          transform: translate(-50%, -50%) scale(1);
        }
      }
    }

    + label {
      align-items: center;
      border-radius: map.get(config.$radius, 'button');
      color: map.get(variables.$greyscale, 'base');
      display: flex;
      flex: 1 1 auto;
      justify-content: center;
      margin: 0;
      padding: 0 map.get(variables.$spacers, 2);
      padding-left: variables.$spacer * 1.3;
      position: relative;
      z-index: 10;

      [class^="pi-"] {
        height: auto;
        left: 2px;
        opacity: 0;
        position: absolute;
        top: 50%;
        transform: translate(30%, -50%);
        visibility: hidden;
        width: auto;
      }
    }

    &:checked + label {
      background-color: map.get(config.$site-colors, 'link' );
      color: map.get(variables.$greyscale, 'white' );
      font-weight: inherit;

      [class^="pi-"] {
        opacity: 1;
        visibility: visible;
      }
    }
  }
}

fieldset:disabled {
  cursor: not-allowed;

  legend {
    cursor: default;
  }
  
  .pui-toggle,
  .toggle {
    pointer-events: none;

    input[type="checkbox"],
    input[type="radio"] {
  
      &:checked + label {
        background-color: color.adjust(map.get(variables.$greyscale, 'light' ), $lightness: math.percentage(config.$hue-threshold)) !important;
        border-color: color.adjust(map.get(variables.$greyscale, 'light' ), $lightness: math.percentage(config.$hue-threshold)) !important;
        color: map.get(variables.$greyscale, 'white') !important;
      }
    }
  }

  input[type="checkbox"],
  input[type="radio"] {

    + label {
      color: color.adjust(map.get(variables.$greyscale, 'light' ), $lightness: math.percentage(config.$hue-threshold)) !important;
    }
  }
}


[role="radio"],
[role="checkbox"] {
  position: relative;
  transition: config.$transitions;
  width: 100%;

  i {
    left: .5rem;
    position: absolute;
    transform: scale(0);
    transition: transform config.$duration ease;
  }

  &[aria-checked="true"] {

    i {
      transform: scale(1);
    }
  }
}

input[type="checkbox"].pill-filter, input[type="radio"].pill-filter {

  + label {
    background-color: map.get(variables.$greyscale, 'white');
    border-radius: map.get(config.$radius, 'button');
    color: map.get(config.$site-colors, 'link');
    border: 1px solid map.get(config.$site-colors, 'link');
    height: auto;
    justify-content: center;
    margin: .25rem;
    padding: map.get(variables.$spacers, 2) 1.5rem;
    transition: config.$transitions;
    i {
      font-size: map.get(variables.$font-percentage, 'xs');
    }

    &:before {
      display: none;
    }

    &:after {
      color: map.get(variables.$greyscale, 'white');
      left: .5rem;
      opacity: 0;
      top: 50%;
      transform: translateY(-50%);
      transition: visibility config.$duration ease, opacity config.$duration ease;
      visibility: hidden;
    }
  }

  &:checked + label {
    background-color: map.get(config.$site-colors, 'link' );
    font-weight: 400;
    color: map.get(variables.$greyscale, 'white');

    &:after {
      opacity: 1;
      visibility: visible;
    }
  }
}

// range
.slidecontainer {
  margin-bottom: 1rem;
  width: 100%;
  @supports not (-ms-high-contrast: none) {
    // targeting averything *but* IE //

    $border-radius: 3rem;
    .slider {
      appearance: none;
      background-color: map.get(config.$brand-colors, 'med-blue');
      border-radius: $border-radius;
      width: 100%;
      height: .5rem;
      margin: 0;
      outline: none;
      transition: config.$transitions;

      &:hover {
        opacity: .7;
      }
      &::-webkit-slider-thumb {
        appearance: none;
        border: 1px solid;
        border-color: map.get(config.$brand-colors, 'med-blue');
        border-radius: $border-radius;
        background-color: map.get(variables.$greyscale, 'white');
        cursor: pointer;
        @include mixins.square(1.3rem);

      }
      &::-moz-range-thumb {
        background-color: map.get(variables.$greyscale, 'white');
        cursor: pointer;
        @include mixins.square(25px);
      }
    }
  }
}
