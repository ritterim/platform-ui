@use "config";
@use "mixins";
@use "variables";
@use "sass:map";

// Display
// 
// New display utilities for Platform UI.
// 
// | Class Name              | Display Value           |
// | ----------------------- | ----------------------- |
// | `display--none`         | `display: none`         |
// | `display--block`        | `display: block`        |
// | `display--inline-block` | `display: inline-block` |
// | `display--inline`       | `display: inline`       |
// | `display--flex`         | `display: flex`         |
// | `display--inline-flex`  | `display: inline-flex`  |
// 
// Styleguide Utilities.Display


// Display: Responsive
//
// Our responsive display utilities allow you to show or hide code at specific resolutions.
//
// If you want to simply add `display: none` to an element you can use the class `hidden`.
//
// We also have print specific display classes. `show-print` and `hide-print`.
//
// The classes are broken down by a display prefix, a breakpoint value, and a
// directional suffix. The prefixes of show and hide represent the display value. Where `show-` will equal `display: block`
// and `hide-` equals `display: none`.
//
// The breakpoint value represents where the style will be used. Think of the breakpoints being within the starting px
// value and the next breakpoint value. So `mobile` will be between `mobile` and `tablet`.
//
// The suffix represents the direction of the media query. `-up` generates a `min-width` media query. `-down` generates a
// `max-width` media query. `-only` generates a `min-width` and `max-width` media query.
//
// | Class Name                     | Display Value              | Generated Media Query                                                     |
// | ------------------------------ | -------------------------- | ------------------------------------------------------------------------- |
// | `hidden`                       | `display: none;`           | No specified resolution                                                   |
// | `show-print`                   | `display: block;`          | `@media print`                                                            |
// | `hide-print`                   | `display: none;`           | `@media print`                                                            |
// | `show-mobile-up`               | `display: block;`          | `@media (min-width: 0px)`                                                 |
// | `show-mobile-only`             | `display: block;`          | `@media (min-width: 0px) and (max-width: 767px)`                          |
// | `hide-mobile-up`               | `display: none;`           | `@media (min-width: 0px)`                                                 |
// | `hide-mobile-only`             | `display: none;`           | `@media (min-width: 0px) and (max-width: 767px)`                          |
// | `hide-mobile-down`             | `display: none;`           | `@media (max-width: 767px)`                                               |
// | `show-tablet-up`               | `display: block;`          | `@media (min-width: 768px)`                                               |
// | `show-tablet-only`             | `display: block;`          | `@media (min-width: 768px) and (max-width: 990px)`                        |
// | `show-tablet-down`             | `display: block;`          | `@media (max-width: 767px)`                                               |
// | `hide-tablet-up`               | `display: none;`           | `@media (min-width: 768px)`                                               |
// | `hide-tablet-only`             | `display: none;`           | `@media (min-width: 768px) and (max-width: 990px)`                        |
// | `hide-tablet-down`             | `display: none;`           | `@media (max-width: 767px)`                                               |
// | `show-lg-tablet-up`            | `display: block;`          | `@media (min-width: 991px)`                                               |
// | `show-lg-tablet-only`          | `display: block;`          | `@media (min-width: 991px) and (max-width: 1239px)`                       |
// | `show-lg-tablet-down`          | `display: block;`          | `@media (max-width: 990px) `                                              |
// | `hide-lg-tablet-up`            | `display: none;`           | `@media (min-width: 991px)`                                               |
// | `hide-lg-tablet-only`          | `display: none;`           | `@media (min-width: 991px) and (max-width: 1239px)`                       |
// | `hide-lg-tablet-down`          | `display: none;`           | `@media (max-width: 990px) `                                              |
// | `show-laptop-up`               | `display: block;`          | `@media (min-width: 1240px)`                                              |
// | `show-laptop-only`             | `display: block;`          | `@media (min-width: 1240px) and (max-width: 1799px)`                      |
// | `show-laptop-down`             | `display: block;`          | `@media (max-width: 1239px)`                                              |
// | `hide-laptop-up`               | `display: none;`           | `@media (min-width: 1240px)`                                              |
// | `hide-laptop-only`             | `display: none;`           | `@media (min-width: 1240px) and (max-width: 1799px)`                      |
// | `hide-laptop-down`             | `display: none;`           | `@media (max-width: 1239px)`                                              |
// | `show-desktop-up`              | `display: block;`          | `@media (min-width: 1800px)`                                              |
// | `hide-desktop-up`              | `display: none;`           | `@media (min-width: 1800px)`                                              |
// | `hide-desktop-down`            | `display: none;`           | `@media (max-width: 1799px)`                                              |
//
// 
// 
//
// Styleguide Utilities.Display.Responsive


.hidden {
  display: none !important;
}

.show-print {
  display: none;
  @media print {
    display: block;
  }
}

.hide-print {
  @media print {
    display: none !important;
  }
}

@each $display in variables.$displays {
  .display--#{$display} {
    display: $display !important;
  }
}

@each $breakpoint, $size in config.$breakpoints {
  @each $display, $d in (s: show, h: hide) {
    .#{$d}-#{$breakpoint}-up {
      @if $d == hide {
        @media (min-width: ($size)) {
          display: none !important;
        }
      }
      @else if $d == show {
        @media (min-width: ($size)) {
          display: block !important;

          &.display--inline-block {
            display: inline-block !important;
          }

          &.display--inline {
            display: inline !important;
          }

          &.flex,
          &.display--flex,
          &.block-container {
            display: flex !important;
          }

          &.flex-inline,
          &.display--inline-flex  {
            display: inline-flex !important;
          }
        }
      }
    }

    // return all keys from a map as a list
    $mapped__keys : map.keys(config.$breakpoints);
    // get index of the current name passed
    $index : (index($mapped__keys, $breakpoint));

    // Display utility for specific break point
    // this will generate a min-width and max-width media query.
    .#{$d}-#{$breakpoint}-only {
      @if $d == show {
        // Hides element by default
        display: none;
      }

      @if $index {
        // if there is another key above the selected key, run this
        @if $index < length(config.$breakpoints) {
          @media (min-width : ($size)) and (max-width: map.get(config.$breakpoints, mixins.nextKey($breakpoint) )  - 1 ) {
            @if $d == hide {
              display: none !important;
            }
            @else {
              display: block !important;

              &.display--inline-block {
                display: inline-block !important;
              }

              &.display--inline {
                display: inline !important;
              }

              &.flex,
              &.display--flex,
              &.block-container {
                display: flex !important;
              }
  
              &.flex-inline,
              &.display--inline-flex  {
                display: inline-flex !important;
              }
            }
          }
        }
      }
    }

    // Display utility for a max-width media query
    .#{$d}-#{$breakpoint}-down {
      // if $breakpoint is not mobile run it
      @if $index > 1 {
        @media (max-width: map.get(config.$breakpoints, $breakpoint) - 1) {
          @if $breakpoint == 'mobiile' {
            
          } @else {
            @if $d == hide {
              display: none !important;
            }
            @else {
              display: block !important;

              &.display--inline-block {
                display: inline-block !important;
              }

              &.display--inline {
                display: inline !important;
              }
  
              &.flex,
              &.display--flex,
              &.block-container {
                display: flex !important;
              }
  
              &.flex-inline,
              &.display--inline-flex {
                display: inline-flex !important;
              }
            }
          }
        }
      }
    }
  }
}
