@use "config";
@use "mixins";
@use "utilities";
@use "variables";
@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

// Button
//
// Each button has a default button style. Color can be added to any button using a combination of background and text utilities.
//
// Add icons to buttons using [platform icons](https://github.com/ritterim/platform-icons) icons: `<i class="pi-plus"></i>`
//
// The default platform button. Usually paired visually with an icon. Can be the default size or large.
//
// - .button
// - .button .button--lg
//
// Markup:
// <button class="button mb-2">Basic Button</button>
// <button class="button mb-2">Add <i class="pi-plus"></i></button>
// <button class="button button--lg">Add <i class="pi-plus"></i></button>
//
//
// Styleguide Components.Button

// Secondary
//
// The secondary platform button. Always a round button paired with a Platform icon. Can be the default size or large.
//
// - .button
// - .button .button--secondary
// - .button .button--secondary .button--lg
//
// Markup:
// <button class="button button--secondary"><i class="pi-download"></i></button>
//
// Styleguide Components.Button.Secondary

// Secondary - Text
//
// If you want to use the secondary button for the look and hover effect, but you need to include text, you can.
// Include the class `has-text` on the secondary button. So the classes would be, `button button--secondary has-text`.
// What this does is add `width: auto` and a little padding for the text.
//
// If you want to display text only on hover, add a data attribute named `data-button-text`, this will insert the value of that attribute on hover.
//
// You can use `has-text` in combination with `data-button-text="Some Text"` and you will get the same result. See the last button in the example below.
// 
//
// Markup:
// <div class="button-group">
//   <button class="button button--secondary has-text">Open <i class="pi-download"></i></button>
//   <button class="button button--secondary" data-button-text="Download"><i class="pi-download"></i></button>
//   <button class="button button--secondary loading" data-button-text="Download"><i class="pi-download"></i></button>
//   <button class="button button--secondary has-text" data-button-text="Has Text"><i class="pi-download"></i></button>
// </div>
//
// Weight: 4
//
// Styleguide Components.Button.SecondaryText

// Group
//
// Evenly space any group of buttons.
//
// - .button--group
//
// Markup:
// <div class="button-group">
//   <a class="button button--secondary"><i class="pi-download"></i></a>
//   <a class="button button--secondary"><i class="pi-lock"></i></a>
//   <a class="button button--secondary"><i class="pi-save"></i></a>
// </div>
//
// Styleguide Components.Button.Group

// Loading
//
// Buttons with a loading icon. Example for form submissions.
//
//
// Markup:
// <div class="button-group">
//   <button class="button loading mb-2" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--lg loading mb-2" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--secondary loading mb-2" aria-label="Download" aria-label="Loading...">
//     <i class="pi-download" aria-hidden="hidden"></i>
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--post loading mb-2" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
// </div>
//
// Notice: For styleguide purposes all of the code is rendered here. The things that should be
// toggled are the `aria-label="Loading"` and the text in the button. So for example, on
// submit, you would add `<span class="sr-only">Loading...</span>` the class
// `sr-only` is key to prevent the button from changin size.
//
// Styleguide Components.Button.Loading

// Accessibility
//
// For our links that should look like buttons, and contain an icon, we need to add specific
// `aria-roles` for accessibility.
// These are links that look like buttons but do not have the same html.
// 
// Another accessibility consideration is to add `aria-label`s appropriately. In the example
// below, we have a button only containing a font icon. To make this button accessible for 
// screen readers, you should add an `aria-label` and apply `aria-hidden="true"` to the icon.
// 
// Learn more about <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute" target="_blank">aria-label</a>.
//
//
// Markup:
// <a class="button button--secondary" role="button" aria-label="Download">
//  <i class="pi-download" aria-hidden="hidden"></i>
// </a>
//
// Styleguide Components.Button.Accessibility

// Active
//
// By adding the class `active` to a button, the button's hover effect is mimicked.
//
// Markup:
// <button class="button mb-2">Add <i class="pi-plus" aria-hidden="hidden"></i></button>
// <button class="button button--lg active">Add <i class="pi-plus" aria-hidden="hidden"></i></button>
// <div class="button-group mt-4">
//   <a class="button button--secondary" role="button" aria-label="Download">
//     <i class="pi-download" aria-hidden="hidden"></i>
//   </a>
//   <a class="button button--secondary active" role="button" aria-label="locked">
//     <i class="pi-lock" aria-hidden="hidden"></i>
//   </a>
// </div>
//
// Styleguide Components.Button.Active

// Disabled
//
// To make a button look inactive, add the disabled attribute.
//
// `<a>` elements do not support the disabled attribute. In order to make an `<a>` that is a button look disabled, add the `.disabled` class.
// Also, note that adding specific aria roles and attributes to your button will help with screen readers and other assitive technology.
//
// Markup:
// <div class="button-group">
//   <button class="button" disabled>
//     Download
//     <i class="pi-download" aria-hidden="hidden"></i>
//   </button>
//   <button class="button" disabled>
//     Lock
//     <i class="pi-lock" aria-hidden="hidden"></i>
//   </button>
//   <button class="button button--post" disabled>
//     Submit
//   </button>
// </div>
// <div class="button-group mt-4">
//   <a href="#" class="button disabled" disabled role="button" aria-disabled="true">
//     Status
//   </a>
//   <a href="#" class="button disabled" disabled role="button" aria-disabled="true">
//     Account
//   </a>
// </div>
//
// Although the links look disabled and have the css property of `pointer-events: none`, users can still navigate to the links and use them via keyboard navigation.
// To ensure that your users could not interact with disabled links, it's recommended to use JavaScript to disable functionality further.
//
// Styleguide Components.Button.Disabled

// Colors
// 
// You can make colored buttons using colors from the `brand-colors` and `grayscale` maps. So `button button--navy` 
// will set the navy background color to the button.
// 
// The hover on the buttons will either darken, or lighten, based on the `lightness` of the background color applied 
// to the button. Checkout the example below and you'll see that the darker buttons, like Navy and Black, will lighten 
// on hover. Whereas buttons like Skyblue, Light Blue, and Beige, will darken on hover.
// 
// To ensure the proper color contrast is set on the buttons for accessibility, we check the lightness of the background color. Based on the value that is returned, 
// the text will either be white, or one of the other grayscale colors.
// 
// <i class="pi-warning text-orange"></i> **NOTE**: You can still add a text color utility class like `text-salmon` to any button you'd like and it will still work.
// 
// <div class="mb-4">
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block">
//       <button class="button button--navy">Navy</button>
//     </div>
//     <div class="block">
//       <button class="button button--skyblue">Skyblue</button>
//     </div>
//     <div class="block background-light">
//       <button class="button button--lightblue">Light Blue</button>
//     </div>
//     <div class="block">
//       <button class="button button--med-blue">Med Blue</button>
//     </div>
//     <div class="block">
//       <button class="button button--beige">Beige</button>
//     </div>
//     <div class="block">
//       <button class="button button--peach">Peach</button>
//     </div>
//     <div class="block">
//       <button class="button button--salmon">Salmon</button>
//     </div>
//     <div class="block">
//       <button class="button button--brown">Brown</button>
//     </div>
//     <div class="block">
//       <button class="button button--orange">Orange</button>
//     </div>
//   </div>
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block background-navy">
//       <button class="button button--white">White</button>
//     </div>
//     <div class="block">
//       <button class="button button--lighter">Lighter</button>
//     </div>
//     <div class="block">
//       <button class="button button--light-mid">Light Mid</button>
//     </div>
//     <div class="block">
//       <button class="button button--light">Light</button>
//     </div>
//     <div class="block">
//       <button class="button button--base">Base</button>
//     </div>
//     <div class="block">
//       <button class="button button--dark">Dark</button>
//     </div>
//     <div class="block">
//       <button class="button button--black">Black</button>
//     </div>
//   </div>
// </div>
// 
// <div class="mb-4">
// <h4 class="mb-3">Markup:</h4>
// 
// ```html
// <button class="button button--navy">Navy</button>
// <button class="button button--skyblue">Skyblue</button>
// <button class="button button--lightblue">Light Blue</button>
// <button class="button button--med-blue">Med Blue</button>
// <button class="button button--beige">Beige</button>
// <button class="button button--peach">Peach</button>
// <button class="button button--salmon">Salmon</button>
// <button class="button button--brown">Brown</button>
// <button class="button button--orange">Orange</button>
// <button class="button button--white">White</button>
// <button class="button button--lighter">Lighter</button>
// <button class="button button--light-mid">Light Mid</button>
// <button class="button button--light">Light</button>
// <button class="button button--base">Base</button>
// <button class="button button--dark">Dark</button>
// <button class="button button--black">Black</button>
// ```
// 
// </div>
// 
// 
// <h3 class="text-dark">Secondary Button Colors</h3>
// 
// The secondary buttons will also work with background colors applied. 
// 
// The hover state is based on the applied background color just like the standard background buttons. Notice, some of the buttons below have text displayed on hover.
// 
// <div class="mb-4">
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block">
//       <button class="button button--secondary"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--navy" data-button-text="Download"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--skyblue has-text" data-button-text="Has Text"><i class="pi-download"></i></button>
//     </div>
//     <div class="block background-light">
//       <button class="button button--secondary button--lightblue"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--med-blue"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--beige"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--peach"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--salmon"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--brown" data-button-text="Download"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--orange"><i class="pi-download"></i></button>
//     </div>
//   </div>
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block background-navy">
//       <button class="button button--secondary button--white"><i class="pi-download"></i></button>
//     </div>
//     <div class="block background-navy">
//       <button class="button button--secondary button--lighter"><i class="pi-download"></i></button>
//     </div>
//     <div class="block background-navy">
//       <button class="button button--secondary button--light-mid"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--light"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--base"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--dark"><i class="pi-download"></i></button>
//     </div>
//     <div class="block">
//       <button class="button button--secondary button--black"><i class="pi-download"></i></button>
//     </div>
//   </div>
// </div>
// 
// <div class="mb-4">
// <h4 class="mb-3">Markup:</h4>
// 
// ```html
// <button class="button button--secondary"><i class="pi-download"></i></button>
// <button class="button button--secondary button--navy" data-button-text="Download"><i class="pi-download"></i></button>
// <button class="button button--secondary button--skyblue has-text" data-button-text="Has Text"><i class="pi-download"></i></button>
// <button class="button button--secondary button--lightblue"><i class="pi-download"></i></button>
// <button class="button button--secondary button--med-blue"><i class="pi-download"></i></button>
// <button class="button button--secondary button--beige"><i class="pi-download"></i></button>
// <button class="button button--secondary button--peach"><i class="pi-download"></i></button>
// <button class="button button--secondary button--salmon"><i class="pi-download"></i></button>
// <button class="button button--secondary button--brown" data-button-text="Download"><i class="pi-download"></i></button>
// <button class="button button--secondary button--orange"><i class="pi-download"></i></button>
// <button class="button button--secondary button--white"><i class="pi-download"></i></button>
// <button class="button button--secondary button--lighter"><i class="pi-download"></i></button>
// <button class="button button--secondary button--light-mid"><i class="pi-download"></i></button>
// <button class="button button--secondary button--light"><i class="pi-download"></i></button>
// <button class="button button--secondary button--base"><i class="pi-download"></i></button>
// <button class="button button--secondary button--dark"><i class="pi-download"></i></button>
// <button class="button button--secondary button--black"><i class="pi-download"></i></button>
// ```
// 
// </div>
// 
// <h3 class="text-dark mt-4">Ghost Buttons</h3>
// 
// Ghost buttons can be used by applying `button--ghost` to a button class. You set the color of the text and border by adding a `button--{color}`
// class. This will set the `color` and `border-color` using the color from the class. 
// 
// When you hover over one of the buttons, it becomes inverted. The background color will change too that of the color used in the color class, 
// and the text color will change to either white, or a darker color, based on the contrast of the background color. 
// 
// <div class="mb-4">
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block">
//       <button class="button button--ghost">Ghost</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--navy">Navy</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--skyblue">Skyblue</button>
//     </div>
//     <div class="block background-light">
//       <button class="button button--ghost button--lightblue">Lightblue</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--med-blue">Med Blue</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--beige">Beige</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--peach">Peach</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--salmon">Salmon</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--brown">Brown</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--orange">Orange</button>
//     </div>
//   </div>
//   <div class="block-container tablet-up-4 laptop-up-6 blocks p-2">
//     <div class="block background-light">
//       <button class="button button--ghost button--white">White</button>
//     </div>
//     <div class="block background-light">
//       <button class="button button--ghost button--lighter">Lighter</button>
//     </div>
//     <div class="block background-light">
//       <button class="button button--ghost button--light-mid">Light Mid</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--light">Light</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--base">Base</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--dark">Dark</button>
//     </div>
//     <div class="block">
//       <button class="button button--ghost button--black">Black</button>
//     </div>
//   </div>
// </div>
// 
// <div class="mb-4">
// <h4 class="mb-3">Markup:</h4>
// 
// ```html
// <button class="button button--ghost">Ghost</button>
// <button class="button button--ghost button--navy">Navy</button>
// <button class="button button--ghost button--skyblue">Skyblue</button>
// <button class="button button--ghost button--lightblue">Lightblue</button>
// <button class="button button--ghost button--med-blue">Med Blue</button>
// <button class="button button--ghost button--beige">Beige</button>
// <button class="button button--ghost button--peach">Peach</button>
// <button class="button button--ghost button--salmon">Salmon</button>
// <button class="button button--ghost button--brown">Brown</button>
// <button class="button button--ghost button--orange">Orange</button>
// <button class="button button--ghost button--white">White</button>
// <button class="button button--ghost button--lighter">Lighter</button>
// <button class="button button--ghost button--light-mid">Light Mid</button>
// <button class="button button--ghost button--light">Light</button>
// <button class="button button--ghost button--base">Base</button>
// <button class="button button--ghost button--dark">Dark</button>
// <button class="button button--ghost button--black">Black</button>
// ```
// 
// </div>
//
// 
// If none of these options work for you, buttons can be customized by using <a href="section-utilities.html#utilities-color-background">`background`</a>, 
// <a href="section-typography.html#typography-utilities-color">`text`</a>, and `hover` (grouped with the 
// <a href="section-utilities.html#utilities-color-background">`background`</a> and <a href="section-typography.html#typography-utilities-color">`text`</a> 
// color documentation) utilities. See some examples below.
//
// Markup:
// <div class="button-group mb-4 p-2">
//   <button class="button background-lightblue background-skyblue--hover text-navy text-white--hover border--color-med-blue">Blue</button>
//   <button class="button background-skyblue background-navy--hover text-navy text-white--hover border--color-navy">Blue</button>
//   <button class="button background-beige background-brown--hover text-brown text-white--hover border--color-brown">Brown</button>
//   <button class="button background-lighter background-orange--hover text-black border--color-orange">Orange</button>
//   <button class="button background-light-mid background-dark--hover text-dark text-white--hover border--color-dark">Dark Grey</button>
// </div>
//
// Styleguide Components.Button.Colors

// Post
// 
// <i class="pi-warning text-orange"></i> **NOTE**: This button style is deprecated as of <strong class="text-navy">v1.2.2</strong>. To see how to recreate this look using utility classes, see the example below. 
//
// Used in CTA scenarios 
// 
// Markup:
// <button class="button button--secondary has-text">Post Button</button>
// <button class="button button--secondary has-text button--lg px-3 py-2 h-auto">Large Post Button</button>
//
// Weight: 2
// 
// Styleguide Components.Button.Post


.button {
  $self: &;

  align-items: center;
  background-color: config.$button-primary-background;
  border: 1px solid color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(config.$hue-threshold * 2));
  border-radius: config.$button-border-radius;
  color: config.$button-primary-color;
  cursor: pointer;
  display: inline-flex;
  font-family: map.get(config.$fonts, 'base');
  font-size: map.get(config.$fonts, 'size');
  justify-content: center;
  line-height: 1.15 !important;
  padding: config.$button-primary-padding;
  transition: config.$transitions;
  white-space: nowrap;

  &.active,
  &:hover {
    background-color: config.$button-primary-hover;
    border-color: initial;
    color: config.$button-secondary-color;
  }

  &:disabled,
  &.disabled {
    background-color: color.adjust(map.get(variables.$greyscale, 'light' ), $lightness: math.percentage(config.$hue-threshold)) !important;
    background-image: none;
    border-color: color.adjust(map.get(variables.$greyscale, 'light' ), $lightness: math.percentage(config.$hue-threshold)) !important;
    color: map.get(variables.$greyscale, 'white') !important;
    cursor: not-allowed;
    pointer-events: none;
  }

  &.loading {
    align-items: center;
    overflow: hidden;
    pointer-events: none;
    position: relative;

    &:before {
      background-color: config.$button-primary-hover;
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }

    &:not([data-button-text]):not(.has-text) {
      &:after {
        @extend %loader;
        @include mixins.square(variables.$spacer);
        box-sizing: border-box;
        content: "";
        display: block;
        border-color: map.get(config.$loader-colors, 'inverted');
        border-top-color: map.get(config.$loader-colors, 'inverted-top');
        left: 50%;
        margin-left: -.5rem;
        margin-top: -.5rem;
        position: absolute;
        top: 50%;
      }
    }
  }

  i {
    margin: 0 map.get(variables.$spacers, 1);
  }

  [aria-hidden="hidden"] {
    pointer-events: none;
  }

  &--secondary {
    background-color: config.$button-secondary-background;
    border: 1px solid config.$button-secondary-background;
    color: config.$button-secondary-color;
    border-radius: config.$button-border-radius * 100;
    padding: 0;
    width: 2rem;
    height: 2rem;
    @extend %flex-center;

    &.active,
    &:hover {
      background-color: config.$button-primary-hover;
      box-shadow: 0 0 0 .3rem color.adjust(config.$button-secondary-background, $lightness: math.percentage(config.$hue-threshold));
    }

    &.has-text {
      width: 2rem;

      @include mixins.breakpoint(lg-tablet, max) {
        font-size: 0;

        i {
          font-size: initial;
        }
      }

      @include mixins.breakpoint(lg-tablet, min) {
        padding: 0 map.get(variables.$spacers, 2 );
        width: auto;
      }
    }

    &[data-button-text] {
      transition: config.$transitions;

      &:after {
        display: none;
        width: 0;
        content: attr(data-button-text);
      }

      &:hover {

        @include mixins.breakpoint(lg-tablet, min) {
          padding: 0 map.get(variables.$spacers, 1 );
          width: auto;

          &:after {
            width: auto;
            display: inline-block;
            padding-right: map.get(variables.$spacers, 2 );
          }
        }
      }

      &.has-text {
        font-size: initial;
        padding: 0 map.get(variables.$spacers, 1 );

        @include mixins.breakpoint(lg-tablet, min) {
          &:after {
            width: auto;
            display: inline-block;
            padding-right: map.get(variables.$spacers, 2 );
          }
        }
      }
    }

    &.loading {

      &:before {
        background-color: config.$button-primary-hover;
        box-shadow: 0 0 0 .3rem color.adjust(config.$button-secondary-background, $lightness: math.percentage(config.$hue-threshold));
      }

      &[data-button-text],
      &.has-text {
        background-color: config.$button-primary-hover;
        border-color: inherit;
        box-shadow: 0 0 0 .3rem color.adjust(config.$button-secondary-background, $lightness: math.percentage(config.$hue-threshold));

        @include mixins.breakpoint(lg-tablet, min) {
          padding: 0 map.get(variables.$spacers, 1 );
          width: auto;
        }

        &:before {
          @extend %loader;
          @include mixins.square(variables.$spacer);
          background-color: unset;
          box-sizing: border-box;
          box-shadow: none;
          content: '';
          display: block;
          border-color: config.$button-primary-background;
          border-top-color: color.adjust(map.get(variables.$greyscale, 'base' ), $lightness: math.percentage(config.$hue-threshold * 2));
          left: 0;
          margin: 0 map.get(variables.$spacers, 1 );
          position: relative;
          top: 0;
        }


        @include mixins.breakpoint(lg-tablet, min) {
          &:after {
            content: attr(data-button-text);
            width: auto;
            display: inline-block;
            padding-right: map.get(variables.$spacers, 2 );
          }
        }

        i {
          display: none;
        }
      }
    }
  }  

  &--lg {
    font-size: map.get(variables.$font-scale, 'lg');
    padding: config.$button-large-padding;

    &.loading {

      &:after {
        @include mixins.square(variables.$spacer * 1.5);
        margin-left: -.75rem;
        margin-top: -.75rem;
      }
    }
  }

  &--plain {
    appearance: none;
    background: transparent;
    border: none;
    color: inherit;
  }

  &.button--ghost {
    background-color: transparent;

    &:hover {
      background-color: config.$button-primary-hover;
    }
  }

  // Button colors
  $button-colors: () !default;

  @if meta.type-of(config.$config-colors) == 'map' {
    $button-colors: map.merge(config.$config-colors, variables.$greyscale);
  } @else {
    $button-colors: map.merge(variables.$greyscale, $button-colors);
    @warn "$config-colors is not set or empty";
  }

  @if meta.type-of($button-colors) == 'map' {
    @each $name, $color in $button-colors {   

      &--#{$name} {
        --button-background: #{$color};
        --button-border: var(--button-background);
        // darken the background-color by 10% on hover
        --button-hover-background: #{color.adjust($color, $lightness: math.percentage(-(config.$hue-threshold)))};

        background-color: var(--button-background);
        border-color: var(--button-border);
        color: var(--button-color);

        // set colors to work based on WCAG AA
        @if lightness($color) > 65 and lightness($color) < 90 {
          --button-color: #{map.get(variables.$greyscale, 'dark')};
        } @else if lightness($color) > 50 and lightness($color) < 65 {
          --button-color: #{color.adjust(map.get(variables.$greyscale, 'dark'), $lightness: math.percentage(-.01))};
        } @else if lightness($color) > 90 {
          --button-color: #{map.get(variables.$greyscale, 'base')};
        } @else {
          // If the $color is dark, set the color to white and lighten the hover background.
          --button-color: #{map.get(variables.$greyscale, 'white')};
          --button-hover-background: #{color.adjust($color, $lightness: math.percentage(config.$hue-threshold))};
        }
  
        &:hover {
          background-color: var(--button-hover-background);
          border-color: var(--button-hover-background);
          color: var(--button-color);
        }

        &.button--secondary {
          // lighten the box-shadow by 10% of background-color
          --box-shadow: #{color.adjust($color, $lightness: math.percentage(config.$hue-threshold))};

          @if lightness($color) <= 50 {
            // For our darkest buttons we lighten the box-shadow by 30%
            --box-shadow: #{color.adjust($color, $lightness: math.percentage(config.$hue-threshold * 3))};
          } @else if lightness($color) > 90 {
            // if the colors lightness value is greater than 90% only lighten the box-shadow be 2%
            --box-shadow: #{color.adjust($color, $lightness: math.percentage(.02 ))};            
          }
      
          &.active,
          &:hover {
            // border-color: initial - same as standard .button
            border-color: initial;
            box-shadow: 0 0 0 .3rem var(--box-shadow);
          }
        }

        &.button--ghost {
          --button-color: #{$color};
          --button-hover-background: #{$color};

          &:hover {
            background-color: var(--button-hover-background);
          
            // set colors to work based on WCAG AA
            @if lightness($color) > 65 and lightness($color) < 90 {
              color: #{map.get(variables.$greyscale, 'dark')};
            } @else if lightness($color) > 50 and lightness($color) < 65 {
              color: #{color.adjust(map.get(variables.$greyscale, 'dark'), $lightness: math.percentage(-.01))};
            } @else if lightness($color) > 90 {
              color: #{map.get(variables.$greyscale, 'base')};
            } @else {
              // If the $color is dark, set the color to white and lighten the hover background.
              color: #{map.get(variables.$greyscale, 'white')};
            }
          }
        }
      }
    }
  }
}

.button-group {
  display: flex;

  .button {
    margin: config.$button-group-margin;

    &:first-child {
      margin-left: 0;
    }

    &:last-child {
      margin-right: 0;
    }
  }
}