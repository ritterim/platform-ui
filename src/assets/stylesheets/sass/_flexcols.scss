// Flex columns
//
// Flex cols allow division of a section into halves, quarters, 3-quarter, thirds, and, 2 thirds. Wherever applied, each section must be wrapped in an initial `.flexcol` div.
//
// `.flexcol` alone produces a full-width column
//
// `.flexcol__end` allows grouping to the right, or `end` of the section.
//
// Markup:
// <div class="flexcol flex-align__center">Full width (.flexcol alone)</div>
// <div class="flexcol">
//   <div class="flexcol-half flex-align__center">Half width</div>
//   <div class="flexcol-half flexcol__end flex-align__center">Half width adding .flex__end</div>
// </div>
// <div class="flexcol">
//   <div class="flexcol-third flex-align__center">Third width</div>
//   <div class="flexcol-third flex-align__center">Third width</div>
//   <div class="flexcol-third flex-align__center">Third width</div>
// </div>
// <div class="flexcol">
//   <div class="flexcol-third flex-align__center">One Third width</div>
//   <div class="flexcol-2-third flex-align__center">2 Third width</div>
// </div>
// <div class="flexcol">
//   <div class="flexcol-quarter flex-align__center">Quarter width</div>
//   <div class="flexcol-quarter flex-align__center">Quarter width</div>
//   <div class="flexcol-quarter flex-align__center">Quarter width</div>
//   <div class="flexcol-quarter flex-align__center">Quarter width</div>
// </div>
// <div class="flexcol">
//   <div class="flexcol-3-quarter flex-align__center">3 Quarter width</div>
//   <div class="flexcol-quarter flex-align__center">Quarter width</div>
// </div>
//
// Styleguide Layout.flexcol

// Flexcol Responsive
// 
// These classes make flexcol responsive by using our breakpoint classes to determin how wide the `.block`s will be.
// 
// Markup:
// <div class="flexcol">
//   <div class="rim-card block block-mobile-2 block-laptop-4">
//     Test
//   </div>
//   <div class="rim-card block block-mobile-2 block-laptop-4">
//     Test
//   </div>
//   <div class="rim-card block block-mobile-2 block-laptop-4">
//     Test
//   </div>
//   <div class="rim-card block block-mobile-2 block-laptop-4">
//     Test
//   </div>
// </div>
// 
// Weight: 4
// 
// Styleguide Layout.flexcol.Responsive

// Flexcol Responsive Wrapper
// 
// You can add the resposinve classes to the `.flexcol` wrapper rather than the `.block` elements.
// 
// Markup:
// <div class="flexcol block-p-2 mobile-up-3 laptop-up-4">
//   <div class="block">
//     <div class="rim-card">
//       Test
//     </div>
//   </div>
//   <div class="block">
//     <div class="rim-card">
//       Test
//     </div>
//   </div>
//   <div class="block">
//     <div class="rim-card">
//       Test
//     </div>
//   </div>
//   <div class="block">
//     <div class="rim-card">
//       Test
//     </div>
//   </div>
// </div>
// 
// Weight: 5
// 
// Styleguide Layout.flexcol.Wrapper

// Responsive Grid Classes
// 
// These classes only need to be on the container.
// 
// Markup:
// <div class="rim-grid-15 row-gap-4 col-gap-2">
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
//   <div class="rim-card">
//     This is a grid item
//   </div>
// </div>
// 
// Weight: 6
// 
// Styleguide Layout.flexcol.grid

// This is for style guide only
.rim-style-modifier__example [class*="flexcol"].flex-align__center {
  border: 1px solid lighten(map-get($greyscale, 'light'), $hue-threshold);
  margin: .5rem 0;
  padding: 1rem;
}

// flex columns
.flexcol {
  $self: &;
  display: flex;
  flex-wrap: wrap;

  > .block { 
    width: 100%;     
  }

  @each $key, $name in $flex-grid {
    &-#{$name} {
      display: flex;
      flex-basis: calc(#{$key} * 100%);
      &#{$self}__end {
        justify-content: flex-end;
      }
    }
  }

  @each $prop, $letter in (margin: m, padding: p) {
    @each $direction, $d in $xy-border {
      @each $unit, $rem in $spacers {
        &.block-#{$letter}#{$d}-#{$unit} {
          > .block {
            #{$prop}-#{$direction}: #{$rem};

            &--full {
              width: 100% !important;
            }
          }
        }
        &.block-#{$letter}-#{$unit} {
          @if $letter == p {
            margin-left: -#{$rem};
            width: calc(100% + #{$rem} * 2);
          }
          > .block {
            #{$prop}: $rem;
          }
        }
        &.block-#{$letter}x-#{$unit} {
          > .block {
            #{$prop}-left: $rem;
            #{$prop}-right: $rem;
          }
        }
        &.block-#{$letter}y-#{$unit} {
          > .block {
            #{$prop}-top: $rem;
            #{$prop}-bottom: $rem;
          }
        }
      }
    }
  }

  @each $name in $breakpoint-classes {
    @for $i from 1 through 12 {
      &.#{$name}-up-#{$i} {
        
        > .block {
          @include breakpoint(#{$name}, min) {
            width: calc(100% / #{$i});
          }
        }
      }
    }
  }

  @each $name in $breakpoint-classes {
    @for $i from 1 through 12 {
      .block-#{$name}-#{$i} {
        @include breakpoint(#{$name}, min) {
          width: calc(100% / #{$i});
        }
      }
    }
  }
}


@each $name in $breakpoint-classes {
  @for $i from 1 through 50 {
    .rim-grid-#{$i} {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(#{$i}rem, 1fr));
      grid-gap: $spacer;      

      @each $unit, $rem in $spacers {
        &.all-gap-#{$unit} {
          grid-gap: #{$rem} !important;
        }
        
        &.col-gap-#{$unit} {
          grid-column-gap: #{$rem} !important;
        }
        
        &.row-gap-#{$unit} {
          grid-row-gap: #{$rem} !important;
        }
      }
    }

    .rim-grid-#{$name}-#{$i} {
      @include breakpoint(#{$name}, min) {
        grid-template-columns: repeat(auto-fit, minmax(#{$i}rem), 1fr) !important;
      }

      @each $unit, $rem in $spacers {
        &.all-gap-#{$name}-#{$unit} {
          @include breakpoint(#{$name}, min) {
            grid-gap: #{$rem} !important;
          }
        }
        
        &.col-gap-#{$name}-#{$unit} {
          @include breakpoint(#{$name}, min) {
            grid-column-gap: #{$rem} !important;
          }
        }
        
        &.row-gap-#{$name}-#{$unit} {
          @include breakpoint(#{$name}, min) {
            grid-row-gap: #{$rem} !important;
          }
        }
      }
    }
  }
}
