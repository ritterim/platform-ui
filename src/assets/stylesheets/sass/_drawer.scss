@use "config";
@use "mixins";
@use "variables";
@use "sass:math";
@use "sass:map";

// Drawer
//
// Drawers slide up or in-from-right.
//
// There are some key classes you need for the drawer to work properly. Be sure to use `drawer drawer--closed` on each drawer.
// From this point, you want to add the proper animation class to the drawer. In the examples below, we have the classes set for the
// direction of the drawer animation. Now all you need to do is toggle the class `drawer--closed` to show or hide the drawer.
//
// You can have a drawer open from the bottom by using the class `drawer-bottom`. To have a drawer open from the right
// use `drawer-right`.
//
// If you want a smaller drawer you can add the class `drawer--single-row`. This class has a min-height and is
// best used in cases where less content will be needed.
//
// Markup:
// <div class="block-container">
//   <button class="button button--post button--lg drawer__open mr-2" data-drawer="default">Toggle default drawer</button>
//   <button class="button button--post button--lg drawer__open" data-drawer="single-row">Toggle single row drawer</button>
// </div>
// <div id="default" class="drawer drawer-bottom drawer--closed animated slideInUp fastest">
//   <div class="drawer__inner animated slideInUp fastest">
//     <div class="drawer__header">
//       <button class="button drawer__close" data-drawer="default">Close <i class="pi-times" aria-hidden="true"></i></button>
//       <h3 class="mb-2">Header.</h3>
//     </div>
//     <div class="drawer__content">
//       <p>Content.</p>
//     </div>
//   </div>
// </div>
// <div id="single-row" class="drawer drawer-bottom drawer--single-row drawer--closed animated slideInUp fastest">
//   <div class="drawer__inner animated slideInUp fastest">
//     <div class="drawer__content">
//       <button class="button drawer__close" data-drawer="single-row">Close <i class="pi-times" aria-hidden="true"></i></button>
//       <p>Single row drawer without a header.</p>
//     </div>
//   </div>
// </div>
//
// Styleguide Components.Drawer


// Drawer Right
//
// This Drawer slides in from the right.
//
// Markup:
// <button class="button button--post button--lg drawer__open" data-drawer="right">Toggle right drawer</button>
// <div id="right" class="drawer drawer-right slide-right-enter-active drawer--closed background-note pt-5 pb-3 px-4">
//   <div class="flex flex--align-center flex--justify-between pb-3 mb-2">
//     <div class="flex flex--align-center">
//       <button class="button button--secondary js-toggle-form">
//         <i class="pi-plus"></i>
//       </button>
//       <h2 class="ml-2 my-0 text-navy">Drawer Right</h2>
//     </div>
//     <button class="button drawer__close" data-drawer="right">Close <i class="pi-times" aria-hidden="true"></i></button>
//   </div>
// </div>
//
// Styleguide Components.Drawer.Right

// Drawer Left
//
// This Drawer slides in from the left.
//
// Markup:
// <button class="button button--post button--lg drawer__open" data-drawer="left">Toggle left drawer</button>
// <div id="left" class="drawer drawer-left slide-left-enter-active drawer--closed background-note pt-5 pb-3 px-4">
//   <div class="flex flex--align-center flex--justify-between pb-3 mb-2">
//     <div class="flex flex--align-center">
//       <button class="button button--secondary js-toggle-form">
//         <i class="pi-plus"></i>
//       </button>
//       <h2 class="ml-2 my-0 text-navy">Drawer Left</h2>
//     </div>
//     <button class="button drawer__close" data-drawer="left">Close <i class="pi-times" aria-hidden="true"></i></button>
//   </div>
// </div>
//
// Styleguide Components.Drawer.Left

.pui-drawer,
.drawer {
  background-color: config.$drawer-background;
  box-shadow: 0 -1rem 2rem rgba(map.get(variables.$greyscale, 'black'), .4);
  display: flex;
  flex-direction: column;
  width: 100%;
  position: fixed;
  z-index: 500;
  bottom: 0;
  left: 0;

  &__inner {
    height: 100%;
    min-height: 50vh;
    overflow-y: visible;
    overflow-x: hidden;

    .pui-drawer-bottom &,
    .drawer-bottom {
      max-height: 80vh;
    }
  }

  &--single-row {
    & {
      .pui-drawer__inner,
      .drawer__inner {
        min-height: 8rem !important;
      }
    }
  }

  &__header {
    padding: config.$drawer-primary-padding;
    position: relative;
    width: 100%;

    @include mixins.breakpoint(tablet, max) {
      padding-top: map.get(variables.$spacers, 5);
    }

    .pui-drawer__close,
    .drawer__close {
      position: absolute;
      right: -#{variables.$spacer};
      top: 50%;
      transform: translate(-50%, -50%);

      @include mixins.breakpoint(tablet, max) {
        top: 1.5rem;
      }
    }
  }
  &__content {
    overflow-y: auto;
    padding: config.$drawer-primary-padding;
    position: relative;
  }
  &--closed {
    display: none;
  }
  &__open {
    cursor: pointer;


    @include mixins.breakpoint(tablet, max) {
      bottom: 3.5rem;
    }
  }
}


// Drawer animates from the side
.pui-drawer-right,
.drawer-right, 
.pui-drawer-left,
.drawer-left {
  bottom: 0;
  box-shadow: 0 -.5rem 2rem rgba(map.get(variables.$greyscale, 'black'), math.percentage(config.$hue-threshold / 2));
  flex-direction: column;
  height: config.$drawer-side-height;
  position: fixed;
  transition: all ease-in-out config.$transitions;
  z-index: 500;
  width: config.$drawer-side-width;

  &[hidden] {
    display: none;
  }
}
.pui-drawer-right,
.drawer-right {
  left: auto;
  right: 0;
}
.pui-drawer-left,
.drawer-left {
  right: auto;
  left: 0;
}

#kss-node {
  .pui-drawer__open,
  .drawer__open {
    position: relative;
    bottom: inherit;
    right: inherit;
  }
}


// side content stuff

.side-content {
  height: calc(100% - 4rem);
}
